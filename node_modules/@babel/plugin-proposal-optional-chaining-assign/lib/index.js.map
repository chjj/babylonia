{"version":3,"names":["_helperPluginUtils","require","_pluginSyntaxOptionalChainingAssign","_helperSkipTransparentExpressionWrappers","_pluginTransformOptionalChaining","_default","exports","default","declare","api","_api$assumption","_api$assumption2","assertVersion","assumptions","noDocumentAll","assumption","pureGetters","types","t","name","inherits","syntaxOptionalChainingAssign","visitor","AssignmentExpression","path","state","_lhs$node$extra","lhs","get","isExpression","isParenthesized","node","extra","parenthesized","isParenthesizedExpression","skipTransparentExprWrappers","isOptionalMemberExpression","ifNullish","scope","buildUndefinedNode","callExpression","addHelper","operator","sequenceExpression","cloneNode","right","transformOptionalChain"],"sources":["../src/index.ts"],"sourcesContent":["import { declare } from \"@babel/helper-plugin-utils\";\nimport syntaxOptionalChainingAssign from \"@babel/plugin-syntax-optional-chaining-assign\";\nimport type { NodePath } from \"@babel/traverse\";\nimport type * as t from \"@babel/types\";\nimport { skipTransparentExprWrappers } from \"@babel/helper-skip-transparent-expression-wrappers\";\nimport { transformOptionalChain } from \"@babel/plugin-transform-optional-chaining\";\n\nexport default declare(api => {\n  api.assertVersion(\n    process.env.BABEL_8_BREAKING && process.env.IS_PUBLISH\n      ? PACKAGE_JSON.version\n      : \"^7.22.5\",\n  );\n\n  const assumptions = {\n    noDocumentAll: api.assumption(\"noDocumentAll\") ?? false,\n    pureGetters: api.assumption(\"pureGetters\") ?? false,\n  };\n\n  const { types: t } = api;\n\n  return {\n    name: \"transform-optional-chaining-assign\",\n    inherits: syntaxOptionalChainingAssign,\n\n    visitor: {\n      AssignmentExpression(path, state) {\n        let lhs = path.get(\"left\");\n        if (!lhs.isExpression()) return;\n        const isParenthesized =\n          lhs.node.extra?.parenthesized ||\n          t.isParenthesizedExpression(lhs.node);\n\n        lhs = skipTransparentExprWrappers(lhs) as NodePath<\n          t.LVal & t.Expression\n        >;\n        if (!lhs.isOptionalMemberExpression()) return;\n\n        let ifNullish: t.Expression = path.scope.buildUndefinedNode();\n        if (isParenthesized) {\n          ifNullish = t.callExpression(\n            state.addHelper(\"nullishReceiverError\"),\n            [],\n          );\n          if (path.node.operator === \"=\") {\n            ifNullish = t.sequenceExpression([\n              t.cloneNode(path.node.right),\n              ifNullish,\n            ]);\n          }\n        }\n\n        transformOptionalChain(lhs, assumptions, path, ifNullish);\n      },\n    },\n  };\n});\n"],"mappings":";;;;;;AAAA,IAAAA,kBAAA,GAAAC,OAAA;AACA,IAAAC,mCAAA,GAAAD,OAAA;AAGA,IAAAE,wCAAA,GAAAF,OAAA;AACA,IAAAG,gCAAA,GAAAH,OAAA;AAAmF,IAAAI,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAEpE,IAAAC,0BAAO,EAACC,GAAG,IAAI;EAAA,IAAAC,eAAA,EAAAC,gBAAA;EAC5BF,GAAG,CAACG,aAAa,CAGX,SACN,CAAC;EAED,MAAMC,WAAW,GAAG;IAClBC,aAAa,GAAAJ,eAAA,GAAED,GAAG,CAACM,UAAU,CAAC,eAAe,CAAC,YAAAL,eAAA,GAAI,KAAK;IACvDM,WAAW,GAAAL,gBAAA,GAAEF,GAAG,CAACM,UAAU,CAAC,aAAa,CAAC,YAAAJ,gBAAA,GAAI;EAChD,CAAC;EAED,MAAM;IAAEM,KAAK,EAAEC;EAAE,CAAC,GAAGT,GAAG;EAExB,OAAO;IACLU,IAAI,EAAE,oCAAoC;IAC1CC,QAAQ,EAAEC,2CAA4B;IAEtCC,OAAO,EAAE;MACPC,oBAAoBA,CAACC,IAAI,EAAEC,KAAK,EAAE;QAAA,IAAAC,eAAA;QAChC,IAAIC,GAAG,GAAGH,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;QAC1B,IAAI,CAACD,GAAG,CAACE,YAAY,CAAC,CAAC,EAAE;QACzB,MAAMC,eAAe,GACnB,EAAAJ,eAAA,GAAAC,GAAG,CAACI,IAAI,CAACC,KAAK,qBAAdN,eAAA,CAAgBO,aAAa,KAC7Bf,CAAC,CAACgB,yBAAyB,CAACP,GAAG,CAACI,IAAI,CAAC;QAEvCJ,GAAG,GAAG,IAAAQ,oEAA2B,EAACR,GAAG,CAEpC;QACD,IAAI,CAACA,GAAG,CAACS,0BAA0B,CAAC,CAAC,EAAE;QAEvC,IAAIC,SAAuB,GAAGb,IAAI,CAACc,KAAK,CAACC,kBAAkB,CAAC,CAAC;QAC7D,IAAIT,eAAe,EAAE;UACnBO,SAAS,GAAGnB,CAAC,CAACsB,cAAc,CAC1Bf,KAAK,CAACgB,SAAS,CAAC,sBAAsB,CAAC,EACvC,EACF,CAAC;UACD,IAAIjB,IAAI,CAACO,IAAI,CAACW,QAAQ,KAAK,GAAG,EAAE;YAC9BL,SAAS,GAAGnB,CAAC,CAACyB,kBAAkB,CAAC,CAC/BzB,CAAC,CAAC0B,SAAS,CAACpB,IAAI,CAACO,IAAI,CAACc,KAAK,CAAC,EAC5BR,SAAS,CACV,CAAC;UACJ;QACF;QAEA,IAAAS,uDAAsB,EAACnB,GAAG,EAAEd,WAAW,EAAEW,IAAI,EAAEa,SAAS,CAAC;MAC3D;IACF;EACF,CAAC;AACH,CAAC,CAAC"}