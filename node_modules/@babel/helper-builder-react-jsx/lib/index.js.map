{"version":3,"names":["_t","require","_helperAnnotateAsPure","booleanLiteral","callExpression","identifier","inherits","isIdentifier","isJSXExpressionContainer","isJSXIdentifier","isJSXMemberExpression","isJSXNamespacedName","isJSXSpreadAttribute","isObjectExpression","isReferenced","isStringLiteral","isValidIdentifier","memberExpression","nullLiteral","objectExpression","objectProperty","react","spreadElement","stringLiteral","thisExpression","_default","opts","visitor","JSXNamespacedName","path","throwIfNamespace","buildCodeFrameError","JSXSpreadChild","JSXElement","exit","state","callExpr","buildElementCall","replaceWith","node","JSXFragment","compat","buildFragmentCall","convertJSXIdentifier","parent","name","type","object","property","namespace","convertAttributeValue","expression","convertAttribute","argument","value","_value$extra","replace","extra","raw","pass","filter","openingPath","get","children","buildChildren","tagExpr","args","tagName","pure","pre","attribs","attributes","convertedAttributes","length","buildOpeningElementAttributes","push","post","call","callee","annotateAsPure","pushProps","_props","objs","useSpread","Error","useBuiltIns","props","map","prop","shift","convertedAttribs","unshift","helper","addHelper","set"],"sources":["../src/index.ts"],"sourcesContent":["import {\n  booleanLiteral,\n  callExpression,\n  identifier,\n  inherits,\n  isIdentifier,\n  isJSXExpressionContainer,\n  isJSXIdentifier,\n  isJSXMemberExpression,\n  isJSXNamespacedName,\n  isJSXSpreadAttribute,\n  isObjectExpression,\n  isReferenced,\n  isStringLiteral,\n  isValidIdentifier,\n  memberExpression,\n  nullLiteral,\n  objectExpression,\n  objectProperty,\n  react,\n  spreadElement,\n  stringLiteral,\n  thisExpression,\n} from \"@babel/types\";\nimport annotateAsPure from \"@babel/helper-annotate-as-pure\";\nimport type { NodePath, Visitor } from \"@babel/traverse\";\nimport type { PluginPass } from \"@babel/core\";\nimport type * as t from \"@babel/types\";\n\ntype ElementState = {\n  tagExpr: t.Expression; // tag node,\n  tagName: string | undefined | null; // raw string tag name,\n  args: Array<any>; // array of call arguments,\n  call?: any; // optional call property that can be set to override the call expression returned,\n  pure: boolean; // true if the element can be marked with a #__PURE__ annotation\n  callee?: any;\n};\n\nexport interface Options {\n  filter?: (node: t.Node, pass: PluginPass) => boolean;\n  pre?: (state: ElementState, pass: PluginPass) => void;\n  post?: (state: ElementState, pass: PluginPass) => void;\n  compat?: boolean;\n  pure?: string;\n  throwIfNamespace?: boolean;\n  useSpread?: boolean;\n  useBuiltIns?: boolean;\n}\n\nexport default function (opts: Options) {\n  const visitor: Visitor<PluginPass<Options>> = {};\n\n  visitor.JSXNamespacedName = function (path) {\n    if (opts.throwIfNamespace) {\n      throw path.buildCodeFrameError(\n        `Namespace tags are not supported by default. React's JSX doesn't support namespace tags. \\\nYou can set \\`throwIfNamespace: false\\` to bypass this warning.`,\n      );\n    }\n  };\n\n  visitor.JSXSpreadChild = function (path) {\n    throw path.buildCodeFrameError(\n      \"Spread children are not supported in React.\",\n    );\n  };\n\n  visitor.JSXElement = {\n    exit(path, state) {\n      const callExpr = buildElementCall(path, state);\n      if (callExpr) {\n        path.replaceWith(inherits(callExpr, path.node));\n      }\n    },\n  };\n\n  visitor.JSXFragment = {\n    exit(path, state) {\n      if (opts.compat) {\n        throw path.buildCodeFrameError(\n          \"Fragment tags are only supported in React 16 and up.\",\n        );\n      }\n      const callExpr = buildFragmentCall(path, state);\n      if (callExpr) {\n        path.replaceWith(inherits(callExpr, path.node));\n      }\n    },\n  };\n\n  return visitor;\n\n  function convertJSXIdentifier(\n    node: t.JSXIdentifier | t.JSXMemberExpression | t.JSXNamespacedName,\n    parent: t.JSXOpeningElement | t.JSXMemberExpression,\n  ): t.ThisExpression | t.StringLiteral | t.MemberExpression | t.Identifier {\n    if (isJSXIdentifier(node)) {\n      if (node.name === \"this\" && isReferenced(node, parent)) {\n        return thisExpression();\n      } else if (isValidIdentifier(node.name, false)) {\n        // @ts-expect-error casting JSXIdentifier to Identifier\n        node.type = \"Identifier\";\n        return node as unknown as t.Identifier;\n      } else {\n        return stringLiteral(node.name);\n      }\n    } else if (isJSXMemberExpression(node)) {\n      return memberExpression(\n        convertJSXIdentifier(node.object, node),\n        convertJSXIdentifier(node.property, node),\n      );\n    } else if (isJSXNamespacedName(node)) {\n      /**\n       * If there is flag \"throwIfNamespace\"\n       * print XMLNamespace like string literal\n       */\n      return stringLiteral(`${node.namespace.name}:${node.name.name}`);\n    }\n\n    return node;\n  }\n\n  function convertAttributeValue(\n    node: t.JSXAttribute[\"value\"] | t.BooleanLiteral,\n  ) {\n    if (isJSXExpressionContainer(node)) {\n      return node.expression;\n    } else {\n      return node;\n    }\n  }\n\n  function convertAttribute(node: t.JSXAttribute | t.JSXSpreadAttribute) {\n    if (isJSXSpreadAttribute(node)) {\n      return spreadElement(node.argument);\n    }\n    const value = convertAttributeValue(node.value || booleanLiteral(true));\n\n    if (isStringLiteral(value) && !isJSXExpressionContainer(node.value)) {\n      value.value = value.value.replace(/\\n\\s+/g, \" \");\n\n      // \"raw\" JSXText should not be used from a StringLiteral because it needs to be escaped.\n      delete value.extra?.raw;\n    }\n\n    if (isJSXNamespacedName(node.name)) {\n      // @ts-expect-error Mutating AST nodes\n      node.name = stringLiteral(\n        node.name.namespace.name + \":\" + node.name.name.name,\n      );\n    } else if (isValidIdentifier(node.name.name, false)) {\n      // @ts-expect-error Mutating AST nodes\n      node.name.type = \"Identifier\";\n    } else {\n      // @ts-expect-error Mutating AST nodes\n      node.name = stringLiteral(node.name.name);\n    }\n\n    return inherits(\n      objectProperty(\n        // @ts-expect-error Mutating AST nodes\n        node.name,\n        value,\n      ),\n      node,\n    );\n  }\n\n  function buildElementCall(path: NodePath<t.JSXElement>, pass: PluginPass) {\n    if (opts.filter && !opts.filter(path.node, pass)) return;\n\n    const openingPath = path.get(\"openingElement\");\n    // @ts-expect-error mutating AST nodes\n    path.node.children = react.buildChildren(path.node);\n\n    const tagExpr = convertJSXIdentifier(\n      openingPath.node.name,\n      openingPath.node,\n    );\n    const args: (t.Expression | t.JSXElement | t.JSXFragment)[] = [];\n\n    let tagName: string;\n    if (isIdentifier(tagExpr)) {\n      tagName = tagExpr.name;\n    } else if (isStringLiteral(tagExpr)) {\n      tagName = tagExpr.value;\n    }\n\n    const state: ElementState = {\n      tagExpr: tagExpr,\n      tagName: tagName,\n      args: args,\n      pure: false,\n    };\n\n    if (opts.pre) {\n      opts.pre(state, pass);\n    }\n\n    const attribs = openingPath.node.attributes;\n    let convertedAttributes: t.Expression;\n    if (attribs.length) {\n      if (process.env.BABEL_8_BREAKING) {\n        convertedAttributes = objectExpression(attribs.map(convertAttribute));\n      } else {\n        convertedAttributes = buildOpeningElementAttributes(attribs, pass);\n      }\n    } else {\n      convertedAttributes = nullLiteral();\n    }\n\n    args.push(\n      convertedAttributes,\n      // @ts-expect-error JSXExpressionContainer has been transformed by convertAttributeValue\n      ...path.node.children,\n    );\n\n    if (opts.post) {\n      opts.post(state, pass);\n    }\n\n    const call = state.call || callExpression(state.callee, args);\n    if (state.pure) annotateAsPure(call);\n\n    return call;\n  }\n\n  function pushProps(\n    _props: (t.ObjectProperty | t.SpreadElement)[],\n    objs: t.Expression[],\n  ) {\n    if (!_props.length) return _props;\n\n    objs.push(objectExpression(_props));\n    return [];\n  }\n\n  /**\n   * The logic for this is quite terse. It's because we need to\n   * support spread elements. We loop over all attributes,\n   * breaking on spreads, we then push a new object containing\n   * all prior attributes to an array for later processing.\n   */\n\n  function buildOpeningElementAttributes(\n    attribs: (t.JSXAttribute | t.JSXSpreadAttribute)[],\n    pass: PluginPass<Options>,\n  ): t.Expression {\n    let _props: (t.ObjectProperty | t.SpreadElement)[] = [];\n    const objs: t.Expression[] = [];\n\n    const { useSpread = false } = pass.opts;\n    if (typeof useSpread !== \"boolean\") {\n      throw new Error(\n        \"transform-react-jsx currently only accepts a boolean option for \" +\n          \"useSpread (defaults to false)\",\n      );\n    }\n\n    const useBuiltIns = pass.opts.useBuiltIns || false;\n    if (typeof useBuiltIns !== \"boolean\") {\n      throw new Error(\n        \"transform-react-jsx currently only accepts a boolean option for \" +\n          \"useBuiltIns (defaults to false)\",\n      );\n    }\n\n    if (useSpread && useBuiltIns) {\n      throw new Error(\n        \"transform-react-jsx currently only accepts useBuiltIns or useSpread \" +\n          \"but not both\",\n      );\n    }\n\n    if (useSpread) {\n      const props = attribs.map(convertAttribute);\n      return objectExpression(props);\n    }\n\n    while (attribs.length) {\n      const prop = attribs.shift();\n      if (isJSXSpreadAttribute(prop)) {\n        _props = pushProps(_props, objs);\n        objs.push(prop.argument);\n      } else {\n        _props.push(convertAttribute(prop));\n      }\n    }\n\n    pushProps(_props, objs);\n    let convertedAttribs: t.Expression;\n\n    if (objs.length === 1) {\n      // only one object\n      convertedAttribs = objs[0];\n    } else {\n      // looks like we have multiple objects\n      if (!isObjectExpression(objs[0])) {\n        objs.unshift(objectExpression([]));\n      }\n\n      const helper = useBuiltIns\n        ? memberExpression(identifier(\"Object\"), identifier(\"assign\"))\n        : pass.addHelper(\"extends\");\n\n      // spread it\n      convertedAttribs = callExpression(helper, objs);\n    }\n\n    return convertedAttribs;\n  }\n\n  function buildFragmentCall(path: NodePath<t.JSXFragment>, pass: PluginPass) {\n    if (opts.filter && !opts.filter(path.node, pass)) return;\n\n    // @ts-expect-error mutating AST nodes\n    path.node.children = react.buildChildren(path.node);\n\n    const args: t.Expression[] = [];\n    const tagName: null = null;\n    const tagExpr = pass.get(\"jsxFragIdentifier\")();\n\n    const state: ElementState = {\n      tagExpr: tagExpr,\n      tagName: tagName,\n      args: args,\n      pure: false,\n    };\n\n    if (opts.pre) {\n      opts.pre(state, pass);\n    }\n\n    // no attributes are allowed with <> syntax\n    args.push(\n      nullLiteral(),\n      // @ts-expect-error JSXExpressionContainer has been transformed by convertAttributeValue\n      ...path.node.children,\n    );\n\n    if (opts.post) {\n      opts.post(state, pass);\n    }\n\n    pass.set(\"usedFragment\", true);\n\n    const call = state.call || callExpression(state.callee, args);\n    if (state.pure) annotateAsPure(call);\n\n    return call;\n  }\n}\n"],"mappings":"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"}